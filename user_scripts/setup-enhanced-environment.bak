#!/bin/bash
# Enhanced environment setup script that fixes common issues and adds powerful features

# Define colors for better output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}Setting up enhanced terminal environment...${NC}"

# Create necessary directories
mkdir -p "$HOME/.local/bin"
mkdir -p "$HOME/.config"
mkdir -p "$HOME/.ssl"
mkdir -p "$HOME/.pkg"

# Fix PATH to ensure local bins are available
cat > "$HOME/.profile" << 'EOF'
# Add local bin directory to PATH
export PATH="$HOME/.local/bin:$PATH"

# Set environment variables for better compatibility
export LANG=en_US.UTF-8
export PYTHONIOENCODING=utf-8
export PYTHONUNBUFFERED=1
export TERM=xterm-256color

# Setup for interactive commands
export INTERACTIVE_COMMAND_SUPPORT=1

# Setup for OpenSSL
export OPENSSL_PASSPHRASE="termux_secure_passphrase"

# Source .bashrc if it exists
if [ -f "$HOME/.bashrc" ]; then
    . "$HOME/.bashrc"
fi
EOF

# Source the profile immediately
source "$HOME/.profile"

# Create symbolic links for scripts
echo -e "${YELLOW}Setting up command wrappers and tools...${NC}"

# Make all scripts executable
chmod +x "$HOME/.local/bin/"*
chmod +x "$HOME/user_scripts/"*

# Setup OpenSSL wrapper
cp -f "$HOME/user_scripts/openssl-wrapper" "$HOME/.local/bin/openssl-wrapper"
chmod +x "$HOME/.local/bin/openssl-wrapper"

# Create alias for OpenSSL in bashrc to automatically use our wrapper
cat >> "$HOME/.bashrc" << 'EOF'
# Alias openssl to use our wrapper for better experience
alias openssl="openssl-wrapper"

# Aliases for common tools
alias ll="ls -la"
alias cls="clear"

# Add pkg command to PATH if not already there
if ! command -v pkg &> /dev/null; then
    if [ -f "$HOME/.local/bin/pkg" ]; then
        alias pkg="$HOME/.local/bin/pkg"
    elif [ -f "$HOME/user_scripts/termux-environment" ]; then
        source "$HOME/user_scripts/termux-environment"
        echo "Termux environment activated"
    fi
fi
EOF

# Setup interactive command handler
cp -f "$HOME/user_scripts/interactive-command-handler" "$HOME/.local/bin/interactive-command-handler"
chmod +x "$HOME/.local/bin/interactive-command-handler"

# Install pkg command if missing
if [ ! -f "$HOME/.local/bin/pkg" ]; then
    echo -e "${YELLOW}Setting up pkg command...${NC}"
    if [ -f "$HOME/user_scripts/termux-environment" ]; then
        # Extract just the pkg command definition
        grep -A 500 "pkg command for Termux" "$HOME/user_scripts/termux-environment" | 
        grep -B 500 -m 1 "EOF" > "$HOME/.local/bin/pkg"
        chmod +x "$HOME/.local/bin/pkg"
    fi
fi

# Setup Termux directory structure, even for non-Termux sessions
echo -e "${YELLOW}Setting up Termux-like directory structure...${NC}"
mkdir -p "$HOME/termux/data/data/com.termux/files/usr/bin"
mkdir -p "$HOME/termux/data/data/com.termux/files/usr/etc"
mkdir -p "$HOME/termux/data/data/com.termux/files/home"

# Link system binaries to Termux directories
for cmd in bash python3 python node npm openssl gcc make git vim nano curl wget; do
    if command -v $cmd &> /dev/null; then
        ln -sf $(which $cmd) "$HOME/termux/data/data/com.termux/files/usr/bin/$cmd" 2>/dev/null
    fi
done

# Create symlink for our openssl wrapper
ln -sf "$HOME/.local/bin/openssl-wrapper" "$HOME/termux/data/data/com.termux/files/usr/bin/openssl-wrapper"

# Link our enhanced tools to the Termux bin directory
ln -sf "$HOME/.local/bin/pkg" "$HOME/termux/data/data/com.termux/files/usr/bin/pkg"

# Create a simple automatic session refresh script to prevent timeouts
cat > "$HOME/.local/bin/session-keep-alive" << 'EOF'
#!/bin/bash
# Simple script to keep session alive by running light commands periodically

echo "Starting session keep-alive service..."
while true; do
    # Run a light command to keep session active
    echo -n "."
    sleep 300  # 5 minutes
done
EOF
chmod +x "$HOME/.local/bin/session-keep-alive"

# Install Termux packages
echo -e "${YELLOW}Setting up common packages...${NC}"

# Create a termux packages script
cat > "$HOME/.local/bin/install-termux-packages" << 'EOF'
#!/bin/bash
# Install common Termux packages

# Create pkg database
PKG_DB="$HOME/.pkg/installed.txt"
mkdir -p "$(dirname "$PKG_DB")"
touch "$PKG_DB"

# Add essential packages
echo "Adding essential packages to simulated environment..."
for pkg in bash python python3 git curl wget vim nano openssl openssh nodejs; do
    if ! grep -q "^$pkg$" "$PKG_DB"; then
        echo "$pkg" >> "$PKG_DB"
    fi
done

# Run the existing Termux package installer if available
if [ -f "$HOME/user_scripts/termux-install-packages" ]; then
    bash "$HOME/user_scripts/termux-install-packages"
fi

echo "Packages installed successfully!"
EOF
chmod +x "$HOME/.local/bin/install-termux-packages"

# Run the package installer
bash "$HOME/.local/bin/install-termux-packages"

# Create a better motd file
cat > "$HOME/termux/data/data/com.termux/files/usr/etc/motd" << 'EOF'
-----------------------------------------------------------
 Welcome to the Enhanced Terminal Environment
-----------------------------------------------------------

 Common commands:
   pkg install <package>    - Install simulated packages
   openssl                  - Enhanced OpenSSL with auto-prompts
   session-keep-alive       - Prevent session timeouts
   install-termux-packages  - Set up common packages

 For OpenSSL operations:
   openssl genrsa -aes256 -out key.pem 2048   
   * Will automatically handle password prompts

 Package management:
   pkg update               - Update package lists  
   pkg list-installed       - Show installed packages
   pkg install <pkg>        - Install a package

 To prevent session timeouts, run:
   session-keep-alive &

-----------------------------------------------------------
EOF

# Display success message
echo -e "${GREEN}Enhanced environment setup complete!${NC}"
echo -e "${YELLOW}To get started, try these commands:${NC}"
echo "  pkg list-installed       - See what's already installed"
echo "  openssl genrsa -aes256 -out key.pem 2048  - Create an encrypted key"
echo "  session-keep-alive &     - Prevent session timeouts"
echo -e "\n${GREEN}Your terminal experience is now significantly improved.${NC}"
