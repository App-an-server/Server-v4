#!/bin/bash
# Tools for SSL certificate creation and management in Termux-like environment

# Define colors for better readability
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${BLUE}Termux SSL Certificate Tools${NC}"
    echo -e "A collection of tools for certificate management in a Termux-like environment\n"
    echo -e "Usage: termux-ssl-tools [command] [options]"
    echo -e "\nCommands:"
    echo -e "  ${GREEN}create-key${NC}       Create a new private key"
    echo -e "  ${GREEN}create-csr${NC}       Create a Certificate Signing Request (CSR)"
    echo -e "  ${GREEN}create-cert${NC}      Create a self-signed certificate"
    echo -e "  ${GREEN}create-ca${NC}        Create a Certificate Authority (CA)"
    echo -e "  ${GREEN}sign-cert${NC}        Sign a certificate with a CA"
    echo -e "  ${GREEN}convert${NC}          Convert between certificate formats"
    echo -e "  ${GREEN}view${NC}             View certificate details"
    echo -e "  ${GREEN}help${NC}             Show this help message"
    echo -e "\nExamples:"
    echo -e "  termux-ssl-tools create-key -o mykey.pem -b 2048"
    echo -e "  termux-ssl-tools create-cert -k mykey.pem -o mycert.pem -d 365"
    echo -e "  termux-ssl-tools view -i certificate.pem"
}

check_openssl() {
    if ! command -v openssl &> /dev/null; then
        echo -e "${RED}Error: OpenSSL is not installed.${NC}"
        echo "You can install it using: pkg install openssl"
        exit 1
    fi
}

create_key() {
    local bits=2048
    local output="private_key.pem"

    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -b|--bits)
                bits="$2"
                shift 2
                ;;
            -o|--output)
                output="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done

    echo -e "${BLUE}Creating a new $bits-bit private key...${NC}"
    openssl genrsa -out "$output" "$bits"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Private key created successfully: $output${NC}"
    else
        echo -e "${RED}Failed to create private key.${NC}"
        return 1
    fi
}

create_csr() {
    local key="private_key.pem"
    local output="request.csr"

    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -k|--key)
                key="$2"
                shift 2
                ;;
            -o|--output)
                output="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done

    if [ ! -f "$key" ]; then
        echo -e "${RED}Error: Key file not found: $key${NC}"
        return 1
    fi

    echo -e "${BLUE}Creating Certificate Signing Request (CSR)...${NC}"
    echo -e "${YELLOW}You will be prompted to enter certificate information:${NC}"
    openssl req -new -key "$key" -out "$output"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}CSR created successfully: $output${NC}"
    else
        echo -e "${RED}Failed to create CSR.${NC}"
        return 1
    fi
}

create_cert() {
    local key="private_key.pem"
    local output="certificate.pem"
    local days=365

    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -k|--key)
                key="$2"
                shift 2
                ;;
            -o|--output)
                output="$2"
                shift 2
                ;;
            -d|--days)
                days="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done

    if [ ! -f "$key" ]; then
        echo -e "${RED}Error: Key file not found: $key${NC}"
        return 1
    fi

    echo -e "${BLUE}Creating a self-signed certificate valid for $days days...${NC}"
    echo -e "${YELLOW}You will be prompted to enter certificate information:${NC}"
    openssl req -new -x509 -key "$key" -out "$output" -days "$days"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Self-signed certificate created successfully: $output${NC}"
    else
        echo -e "${RED}Failed to create certificate.${NC}"
        return 1
    fi
}

create_ca() {
    local key_output="ca_key.pem"
    local cert_output="ca_cert.pem"
    local days=3650  # 10 years by default for a CA

    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -k|--key-output)
                key_output="$2"
                shift 2
                ;;
            -c|--cert-output)
                cert_output="$2"
                shift 2
                ;;
            -d|--days)
                days="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done

    echo -e "${BLUE}Creating a Certificate Authority (CA)...${NC}"
    echo -e "${YELLOW}You will be prompted to enter CA information:${NC}"
    openssl req -new -x509 -days "$days" -nodes -newkey rsa:4096 -keyout "$key_output" -out "$cert_output"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}CA created successfully:${NC}"
        echo -e "  CA Key: $key_output"
        echo -e "  CA Certificate: $cert_output"
    else
        echo -e "${RED}Failed to create CA.${NC}"
        return 1
    fi
}

sign_cert() {
    local ca_key="ca_key.pem"
    local ca_cert="ca_cert.pem"
    local csr="request.csr"
    local output="signed_cert.pem"
    local days=365

    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -k|--ca-key)
                ca_key="$2"
                shift 2
                ;;
            -c|--ca-cert)
                ca_cert="$2"
                shift 2
                ;;
            -r|--csr)
                csr="$2"
                shift 2
                ;;
            -o|--output)
                output="$2"
                shift 2
                ;;
            -d|--days)
                days="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done

    if [ ! -f "$ca_key" ]; then
        echo -e "${RED}Error: CA key file not found: $ca_key${NC}"
        return 1
    fi

    if [ ! -f "$ca_cert" ]; then
        echo -e "${RED}Error: CA certificate file not found: $ca_cert${NC}"
        return 1
    fi

    if [ ! -f "$csr" ]; then
        echo -e "${RED}Error: CSR file not found: $csr${NC}"
        return 1
    fi

    echo -e "${BLUE}Signing certificate with CA...${NC}"
    openssl x509 -req -in "$csr" -CA "$ca_cert" -CAkey "$ca_key" -CAcreateserial -out "$output" -days "$days"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Certificate signed successfully: $output${NC}"
    else
        echo -e "${RED}Failed to sign certificate.${NC}"
        return 1
    fi
}

convert_cert() {
    local input=""
    local output=""
    local format=""

    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--input)
                input="$2"
                shift 2
                ;;
            -o|--output)
                output="$2"
                shift 2
                ;;
            -f|--format)
                format="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done

    if [ -z "$input" ] || [ -z "$output" ] || [ -z "$format" ]; then
        echo -e "${RED}Error: Input, output, and format are required.${NC}"
        echo "Usage: termux-ssl-tools convert -i input.pem -o output.der -f der"
        return 1
    fi

    if [ ! -f "$input" ]; then
        echo -e "${RED}Error: Input file not found: $input${NC}"
        return 1
    fi

    echo -e "${BLUE}Converting certificate to $format format...${NC}"
    case "$format" in
        der)
            openssl x509 -in "$input" -outform der -out "$output"
            ;;
        pem)
            openssl x509 -in "$input" -inform der -outform pem -out "$output"
            ;;
        *)
            echo -e "${RED}Error: Unsupported format: $format${NC}"
            echo "Supported formats: pem, der"
            return 1
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Certificate converted successfully: $output${NC}"
    else
        echo -e "${RED}Failed to convert certificate.${NC}"
        return 1
    fi
}

view_cert() {
    local input=""
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -i|--input)
                input="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Error: Unknown option: $1${NC}"
                return 1
                ;;
        esac
    done

    if [ -z "$input" ]; then
        echo -e "${RED}Error: Input file is required.${NC}"
        echo "Usage: termux-ssl-tools view -i certificate.pem"
        return 1
    fi

    if [ ! -f "$input" ]; then
        echo -e "${RED}Error: Input file not found: $input${NC}"
        return 1
    fi

    echo -e "${BLUE}Certificate details:${NC}"
    openssl x509 -in "$input" -text -noout
}

# Main function
main() {
    check_openssl

    if [ $# -eq 0 ]; then
        show_help
        return 0
    fi

    local command="$1"
    shift

    case "$command" in
        create-key)
            create_key "$@"
            ;;
        create-csr)
            create_csr "$@"
            ;;
        create-cert)
            create_cert "$@"
            ;;
        create-ca)
            create_ca "$@"
            ;;
        sign-cert)
            sign_cert "$@"
            ;;
        convert)
            convert_cert "$@"
            ;;
        view)
            view_cert "$@"
            ;;
        help)
            show_help
            ;;
        *)
            echo -e "${RED}Error: Unknown command: $command${NC}"
            show_help
            return 1
            ;;
    esac
}

main "$@"
